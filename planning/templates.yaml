# Planning for `Workflows/templating` content

- Overview 
  % We implement templating for the automatic generation of simulation engine input scripts, so that the same template can be applied for many different materials under same job for example
# Links to other pages


- Concepts
  # Templating Important Concepts
  % Explain general concept of templating in computer science
  % Put link to general wikipedia article on Templating (https://en.wikipedia.org/wiki/Web_template_system)
  % Introduce Jinja
  % Explain how we use Jinja to write input scripts for many materials with possibly many different input parameters, under the same Job
  # Basic Syntax
  %There are a few kinds of delimiters. The default Jinja delimiters are configured as follows

  - " {% ... %} " for Statements
  - " {{ ... }} " for Expressions to print to the template output
  - " {# ... #} " for Comments not included in the template output
  - " #  ... ## " for Line Statements

  % Offer simple example showing use of curly braces for inserting variables
  % Introduce important terms - context (database - or dictionary - of variable definitions and values), and rendering (templating engine acting upon template to generate final output)
  % Introduce "set" statement - for example {% set element_name = "Al" %}
  % Introduce dotted notation for importing from different levels across context dictionary, for example - KPPRA =  {{kgrid.KPPRA}} 
  % Put link to Jinja documentation page 
  # Loops and Conditional Statements
  % Introduce basic usage of loops and conditional Statements
  ## Conditionals
  % Put simple example relevant to materials science
  % {% if element_lines.includes(high_cutoff_element) %} 60{% else %} 45{% endif %}
  ## For Loops
  % Put simple example relevant to materials science, for example to define kgrid in QE input files
  % {% for d in kgrid.dimensions %}{{d}} {% endfor %}{% for s in kgrid.shifts %}{{s}} {% endfor %}
  # Filters
  % Variables can be modified by filters. Filters are separated from the variable by a pipe symbol (|) and may have optional arguments in parentheses. Multiple filters can be chained. The output of one filter is applied to the next.
  % Mention existence of Built-in filters in Jinja
  % Put link to complete list in official documentation (http://jinja.pocoo.org/docs/2.10/templates/#builtin-filters)
  % "Raw" syntax necessary when entering Execution variables under WebApp

- Exabyte Conventions
  # `Swig` as the Jinja implementation in Javascript http://node-swig.github.io/swig-templates/
  % allows for using Javascript/ES6 in template language - eg. `array.includes()`
  # Passing Standard Output
  % Take example from pre-existing documentation
  # Context in our platform
  % Two different contexts on our platform - WebApp and Execution
  % Schemas for VASP, QE, Other applications # maybe move to application
  % Different variables are available in each - In particular Execution only has WORKDIR variable, WebApp has all the rest
  % Raw is necessary for preventing WebApp from rendering Execution variables, because they are not available there


- Example 
  # Example of Input Script Templating 
  % We provide here an example of how Jinja Templating can work for generating Quantum ESPRESSO input scripts
  # 1 - Template Example
  % Put example of QE template here
  # 2 - Context Example
  % Put example of Context, taken from template data in Workflow Designer
  # 3 - Rendering
  % The above template example can be rendered by passing to it the variables defined and value-assigned in the context.
  % Put rendered input script for QE here 
  
- UI
  # Templating Implementation on User Interface
  % We implement the Jinja-powered Templating and Rendering for generating input scripts the simulation engines that we support 
  % This implementation can be found and customized by the user under Worflow Designer user Interface - put link to corresponding page


# In a separate section
- Tutorial
    - templating directory
  # Tutorial: Custom Input Script Templates with the Jinja Engine
  % User can write custom templates for automated generation of input scripts for simulation engines using the Jinja language and templating engine.
  % Templates and their respective Contexts can be entered under Workflow Designer - put link to corresponding page
  # Example: Setting Input Parameters for VASP
  % The code below automatically sets the value of "encut" flag, necessary in VASP input scripts, for materials that contain Oxygen to higher that for others
  % encut = 60 if Oxygen is present in material; or 45 if no Oxygen is present
  % Put code here
  # Lines Explanation
  % Explain each line in turn, with links to main explanation for Jinja Syntax (in particular set command and conditional statement)
